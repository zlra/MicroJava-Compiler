// generated with ast extension for cup
// version 0.8
// 18/7/2018 12:51:2


package rs.ac.bg.etf.pp1.ast;

public abstract class VisitorAdaptor implements Visitor { 

    public void visit(DeclarationList DeclarationList) { }
    public void visit(Relop Relop) { }
    public void visit(CondTermOrList CondTermOrList) { }
    public void visit(OptionalOptionalActPars OptionalOptionalActPars) { }
    public void visit(OptionalExtends OptionalExtends) { }
    public void visit(MethodDeclarationList MethodDeclarationList) { }
    public void visit(ExpressionList ExpressionList) { }
    public void visit(Factor Factor) { }
    public void visit(DesignatorAllList DesignatorAllList) { }
    public void visit(CondFactList CondFactList) { }
    public void visit(VarDeclarationElement VarDeclarationElement) { }
    public void visit(GeneralDeclaration GeneralDeclaration) { }
    public void visit(Term Term) { }
    public void visit(OptionalSquareBrackets OptionalSquareBrackets) { }
    public void visit(MulOp MulOp) { }
    public void visit(IfCondition IfCondition) { }
    public void visit(OptionalStatements OptionalStatements) { }
    public void visit(OptionalFormPars OptionalFormPars) { }
    public void visit(ReturnStatement ReturnStatement) { }
    public void visit(DesignatorAssignExpression DesignatorAssignExpression) { }
    public void visit(AnyType AnyType) { }
    public void visit(VarDeclarationList VarDeclarationList) { }
    public void visit(OptionalActPars OptionalActPars) { }
    public void visit(ConstElement ConstElement) { }
    public void visit(ActPars ActPars) { }
    public void visit(AddOp AddOp) { }
    public void visit(DesignatorList DesignatorList) { }
    public void visit(DesignatorStatement DesignatorStatement) { }
    public void visit(ConstAssignList ConstAssignList) { }
    public void visit(PrintStatement PrintStatement) { }
    public void visit(Statement Statement) { }
    public void visit(CondFact CondFact) { }
    public void visit(FormPar FormPar) { }
    public void visit(DesignatorElement DesignatorElement) { }
    public void visit(OptionalVarDeclList OptionalVarDeclList) { }
    public void visit(OptionalMinus OptionalMinus) { }
    public void visit(FormPars FormPars) { }
    public void visit(OptionalElse OptionalElse) { }
    public void visit(OptionalMethodDeclList OptionalMethodDeclList) { }
    public void visit(ActParsDerived2 ActParsDerived2) { visit(); }
    public void visit(ActParsDerived1 ActParsDerived1) { visit(); }
    public void visit(NonExistingActPars NonExistingActPars) { visit(); }
    public void visit(ExistingActPars ExistingActPars) { visit(); }
    public void visit(OptionalOptionalActParsNotExist OptionalOptionalActParsNotExist) { visit(); }
    public void visit(OptionalOptionalActParsExist OptionalOptionalActParsExist) { visit(); }
    public void visit(FactorBracketExpression FactorBracketExpression) { visit(); }
    public void visit(FactorNewTypeWithExpr FactorNewTypeWithExpr) { visit(); }
    public void visit(FactorNewTypeNoExpr FactorNewTypeNoExpr) { visit(); }
    public void visit(FactorBoolConst FactorBoolConst) { visit(); }
    public void visit(FactorCharConst FactorCharConst) { visit(); }
    public void visit(FactorNumConst FactorNumConst) { visit(); }
    public void visit(FactorDesignator FactorDesignator) { visit(); }
    public void visit(TermSingleFactor TermSingleFactor) { visit(); }
    public void visit(TermMultiFactor TermMultiFactor) { visit(); }
    public void visit(MulOpMod MulOpMod) { visit(); }
    public void visit(MulOpDivide MulOpDivide) { visit(); }
    public void visit(MulOpMultiply MulOpMultiply) { visit(); }
    public void visit(MinusAddOp MinusAddOp) { visit(); }
    public void visit(PlusAddOp PlusAddOp) { visit(); }
    public void visit(SingleExpressionList SingleExpressionList) { visit(); }
    public void visit(MultiExpressionlist MultiExpressionlist) { visit(); }
    public void visit(NonExistingOptionalMinus NonExistingOptionalMinus) { visit(); }
    public void visit(ExistingOptionalMinus ExistingOptionalMinus) { visit(); }
    public void visit(Expression Expression) { visit(); }
    public void visit(DesignatorElementExpr DesignatorElementExpr) { visit(); }
    public void visit(DesignatorElementIdent DesignatorElementIdent) { visit(); }
    public void visit(ExistingDesignatorListSingle ExistingDesignatorListSingle) { visit(); }
    public void visit(ExistingDesignatorListMulti ExistingDesignatorListMulti) { visit(); }
    public void visit(ArrayOrClassName ArrayOrClassName) { visit(); }
    public void visit(DesignatorArrayOrClass DesignatorArrayOrClass) { visit(); }
    public void visit(DesignatorIdent DesignatorIdent) { visit(); }
    public void visit(Designator Designator) { visit(); }
    public void visit(DesignatorAssignExpressionDerived1 DesignatorAssignExpressionDerived1) { visit(); }
    public void visit(DesignatorAssignExpress DesignatorAssignExpress) { visit(); }
    public void visit(DecDesignatorStatement DecDesignatorStatement) { visit(); }
    public void visit(IncDesignatorStatement IncDesignatorStatement) { visit(); }
    public void visit(ActParsDesignatorStatement ActParsDesignatorStatement) { visit(); }
    public void visit(AssignDesignatorStatement AssignDesignatorStatement) { visit(); }
    public void visit(GteRelop GteRelop) { visit(); }
    public void visit(GtRelop GtRelop) { visit(); }
    public void visit(LteRelop LteRelop) { visit(); }
    public void visit(LtRelop LtRelop) { visit(); }
    public void visit(NeqRelop NeqRelop) { visit(); }
    public void visit(EqRelop EqRelop) { visit(); }
    public void visit(MultiCondFact MultiCondFact) { visit(); }
    public void visit(SingleCondFact SingleCondFact) { visit(); }
    public void visit(NonExistingCondFactList NonExistingCondFactList) { visit(); }
    public void visit(ExistingCondFactList ExistingCondFactList) { visit(); }
    public void visit(CondTerm CondTerm) { visit(); }
    public void visit(NonExistingCondTermList NonExistingCondTermList) { visit(); }
    public void visit(ExistingCondTermList ExistingCondTermList) { visit(); }
    public void visit(Condition Condition) { visit(); }
    public void visit(NonExistingOptionalStatement NonExistingOptionalStatement) { visit(); }
    public void visit(ExistingOptionalElse ExistingOptionalElse) { visit(); }
    public void visit(IfConditionDerived1 IfConditionDerived1) { visit(); }
    public void visit(IfCond IfCond) { visit(); }
    public void visit(IfStatement IfStatement) { visit(); }
    public void visit(PrintStatementWithNumConst PrintStatementWithNumConst) { visit(); }
    public void visit(PrintStatementWithoutNumConst PrintStatementWithoutNumConst) { visit(); }
    public void visit(ReadSt ReadSt) { visit(); }
    public void visit(ReadStatement ReadStatement) { visit(); }
    public void visit(NonEmptyReturnStatement NonEmptyReturnStatement) { visit(); }
    public void visit(EmptyReturnStatement EmptyReturnStatement) { visit(); }
    public void visit(DoStatement DoStatement) { visit(); }
    public void visit(ListStm ListStm) { visit(); }
    public void visit(PrintStm PrintStm) { visit(); }
    public void visit(ReadStm ReadStm) { visit(); }
    public void visit(ReturnStm ReturnStm) { visit(); }
    public void visit(ContinueStm ContinueStm) { visit(); }
    public void visit(BreakStm BreakStm) { visit(); }
    public void visit(DoStm DoStm) { visit(); }
    public void visit(IfStm IfStm) { visit(); }
    public void visit(DesignatorStm DesignatorStm) { visit(); }
    public void visit(EmptyOptionalStatements EmptyOptionalStatements) { visit(); }
    public void visit(NonEmptyOptionalStatements NonEmptyOptionalStatements) { visit(); }
    public void visit(FormParDerived1 FormParDerived1) { visit(); }
    public void visit(FormParamNoErr FormParamNoErr) { visit(); }
    public void visit(SingleFormPars SingleFormPars) { visit(); }
    public void visit(MultiFormPars MultiFormPars) { visit(); }
    public void visit(NonExistingFormPars NonExistingFormPars) { visit(); }
    public void visit(ExistingFormPars ExistingFormPars) { visit(); }
    public void visit(VoidType VoidType) { visit(); }
    public void visit(NotVoid NotVoid) { visit(); }
    public void visit(MethodName MethodName) { visit(); }
    public void visit(MethodDeclaration MethodDeclaration) { visit(); }
    public void visit(NonExistingMethodDeclarationList NonExistingMethodDeclarationList) { visit(); }
    public void visit(ExistingMethodDeclarationList ExistingMethodDeclarationList) { visit(); }
    public void visit(NonExistingMethodDeclList NonExistingMethodDeclList) { visit(); }
    public void visit(ExistingMethodDeclList ExistingMethodDeclList) { visit(); }
    public void visit(NonExistingOptionalVarDeclList NonExistingOptionalVarDeclList) { visit(); }
    public void visit(ExistingOptionalVarDeclList ExistingOptionalVarDeclList) { visit(); }
    public void visit(ClassDeclBody ClassDeclBody) { visit(); }
    public void visit(NonExistingOptionalExtends NonExistingOptionalExtends) { visit(); }
    public void visit(ExistingOptionalExtends ExistingOptionalExtends) { visit(); }
    public void visit(ClassDeclaration ClassDeclaration) { visit(); }
    public void visit(NonExistingSquareBrackets NonExistingSquareBrackets) { visit(); }
    public void visit(ExistingSquareBrackets ExistingSquareBrackets) { visit(); }
    public void visit(VarDeclarationElementDerived1 VarDeclarationElementDerived1) { visit(); }
    public void visit(VarDeclarationElem VarDeclarationElem) { visit(); }
    public void visit(MultiVarDeclarationList MultiVarDeclarationList) { visit(); }
    public void visit(SingleVarDeclarationList SingleVarDeclarationList) { visit(); }
    public void visit(VarDeclaration VarDeclaration) { visit(); }
    public void visit(ConstElementChar ConstElementChar) { visit(); }
    public void visit(ConstElementBoolean ConstElementBoolean) { visit(); }
    public void visit(ConstElementInteger ConstElementInteger) { visit(); }
    public void visit(MultiConstAssignList MultiConstAssignList) { visit(); }
    public void visit(SingleConstAssignList SingleConstAssignList) { visit(); }
    public void visit(Type Type) { visit(); }
    public void visit(ConstDeclaration ConstDeclaration) { visit(); }
    public void visit(ClassDecl ClassDecl) { visit(); }
    public void visit(VarDecl VarDecl) { visit(); }
    public void visit(ConstDecl ConstDecl) { visit(); }
    public void visit(DeclarationListEmpty DeclarationListEmpty) { visit(); }
    public void visit(DeclarationListNotEmpty DeclarationListNotEmpty) { visit(); }
    public void visit(ProgramName ProgramName) { visit(); }
    public void visit(Program Program) { visit(); }


    public void visit() { }
}
